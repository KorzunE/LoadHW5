/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 20553.0, "series": [{"data": [[0.0, 5.0], [0.1, 5.0], [0.2, 5.0], [0.3, 6.0], [0.4, 8.0], [0.5, 8.0], [0.6, 9.0], [0.7, 9.0], [0.8, 10.0], [0.9, 10.0], [1.0, 10.0], [1.1, 20.0], [1.2, 23.0], [1.3, 23.0], [1.4, 29.0], [1.5, 30.0], [1.6, 33.0], [1.7, 33.0], [1.8, 38.0], [1.9, 40.0], [2.0, 48.0], [2.1, 48.0], [2.2, 49.0], [2.3, 49.0], [2.4, 50.0], [2.5, 50.0], [2.6, 50.0], [2.7, 51.0], [2.8, 52.0], [2.9, 52.0], [3.0, 52.0], [3.1, 52.0], [3.2, 53.0], [3.3, 53.0], [3.4, 53.0], [3.5, 53.0], [3.6, 54.0], [3.7, 54.0], [3.8, 54.0], [3.9, 56.0], [4.0, 56.0], [4.1, 56.0], [4.2, 56.0], [4.3, 60.0], [4.4, 64.0], [4.5, 64.0], [4.6, 64.0], [4.7, 64.0], [4.8, 64.0], [4.9, 65.0], [5.0, 65.0], [5.1, 65.0], [5.2, 65.0], [5.3, 66.0], [5.4, 66.0], [5.5, 68.0], [5.6, 68.0], [5.7, 69.0], [5.8, 71.0], [5.9, 71.0], [6.0, 71.0], [6.1, 72.0], [6.2, 73.0], [6.3, 75.0], [6.4, 75.0], [6.5, 76.0], [6.6, 80.0], [6.7, 82.0], [6.8, 82.0], [6.9, 83.0], [7.0, 84.0], [7.1, 84.0], [7.2, 84.0], [7.3, 86.0], [7.4, 86.0], [7.5, 86.0], [7.6, 86.0], [7.7, 87.0], [7.8, 87.0], [7.9, 88.0], [8.0, 88.0], [8.1, 89.0], [8.2, 91.0], [8.3, 91.0], [8.4, 91.0], [8.5, 92.0], [8.6, 93.0], [8.7, 94.0], [8.8, 94.0], [8.9, 94.0], [9.0, 94.0], [9.1, 94.0], [9.2, 94.0], [9.3, 96.0], [9.4, 96.0], [9.5, 97.0], [9.6, 97.0], [9.7, 97.0], [9.8, 97.0], [9.9, 97.0], [10.0, 97.0], [10.1, 97.0], [10.2, 97.0], [10.3, 98.0], [10.4, 98.0], [10.5, 100.0], [10.6, 100.0], [10.7, 100.0], [10.8, 100.0], [10.9, 101.0], [11.0, 102.0], [11.1, 103.0], [11.2, 103.0], [11.3, 103.0], [11.4, 103.0], [11.5, 103.0], [11.6, 103.0], [11.7, 103.0], [11.8, 103.0], [11.9, 104.0], [12.0, 104.0], [12.1, 104.0], [12.2, 104.0], [12.3, 105.0], [12.4, 105.0], [12.5, 106.0], [12.6, 106.0], [12.7, 106.0], [12.8, 106.0], [12.9, 108.0], [13.0, 108.0], [13.1, 108.0], [13.2, 108.0], [13.3, 108.0], [13.4, 109.0], [13.5, 109.0], [13.6, 109.0], [13.7, 109.0], [13.8, 109.0], [13.9, 109.0], [14.0, 109.0], [14.1, 110.0], [14.2, 111.0], [14.3, 112.0], [14.4, 112.0], [14.5, 112.0], [14.6, 112.0], [14.7, 112.0], [14.8, 112.0], [14.9, 112.0], [15.0, 113.0], [15.1, 113.0], [15.2, 113.0], [15.3, 113.0], [15.4, 113.0], [15.5, 115.0], [15.6, 115.0], [15.7, 115.0], [15.8, 116.0], [15.9, 116.0], [16.0, 116.0], [16.1, 117.0], [16.2, 117.0], [16.3, 117.0], [16.4, 117.0], [16.5, 117.0], [16.6, 118.0], [16.7, 118.0], [16.8, 118.0], [16.9, 119.0], [17.0, 120.0], [17.1, 120.0], [17.2, 120.0], [17.3, 120.0], [17.4, 120.0], [17.5, 120.0], [17.6, 120.0], [17.7, 121.0], [17.8, 121.0], [17.9, 121.0], [18.0, 121.0], [18.1, 122.0], [18.2, 123.0], [18.3, 123.0], [18.4, 123.0], [18.5, 124.0], [18.6, 124.0], [18.7, 125.0], [18.8, 125.0], [18.9, 125.0], [19.0, 125.0], [19.1, 125.0], [19.2, 125.0], [19.3, 126.0], [19.4, 126.0], [19.5, 126.0], [19.6, 127.0], [19.7, 127.0], [19.8, 127.0], [19.9, 128.0], [20.0, 128.0], [20.1, 128.0], [20.2, 128.0], [20.3, 128.0], [20.4, 128.0], [20.5, 128.0], [20.6, 128.0], [20.7, 129.0], [20.8, 129.0], [20.9, 129.0], [21.0, 129.0], [21.1, 130.0], [21.2, 130.0], [21.3, 130.0], [21.4, 131.0], [21.5, 131.0], [21.6, 132.0], [21.7, 132.0], [21.8, 132.0], [21.9, 132.0], [22.0, 132.0], [22.1, 132.0], [22.2, 133.0], [22.3, 133.0], [22.4, 133.0], [22.5, 133.0], [22.6, 133.0], [22.7, 133.0], [22.8, 133.0], [22.9, 133.0], [23.0, 134.0], [23.1, 134.0], [23.2, 134.0], [23.3, 134.0], [23.4, 135.0], [23.5, 135.0], [23.6, 136.0], [23.7, 136.0], [23.8, 136.0], [23.9, 136.0], [24.0, 137.0], [24.1, 137.0], [24.2, 137.0], [24.3, 137.0], [24.4, 138.0], [24.5, 138.0], [24.6, 139.0], [24.7, 139.0], [24.8, 139.0], [24.9, 139.0], [25.0, 139.0], [25.1, 140.0], [25.2, 140.0], [25.3, 140.0], [25.4, 140.0], [25.5, 140.0], [25.6, 140.0], [25.7, 140.0], [25.8, 140.0], [25.9, 141.0], [26.0, 141.0], [26.1, 141.0], [26.2, 141.0], [26.3, 141.0], [26.4, 141.0], [26.5, 141.0], [26.6, 141.0], [26.7, 141.0], [26.8, 142.0], [26.9, 142.0], [27.0, 142.0], [27.1, 143.0], [27.2, 143.0], [27.3, 143.0], [27.4, 143.0], [27.5, 143.0], [27.6, 143.0], [27.7, 143.0], [27.8, 144.0], [27.9, 144.0], [28.0, 144.0], [28.1, 144.0], [28.2, 144.0], [28.3, 145.0], [28.4, 145.0], [28.5, 145.0], [28.6, 145.0], [28.7, 145.0], [28.8, 145.0], [28.9, 145.0], [29.0, 145.0], [29.1, 145.0], [29.2, 145.0], [29.3, 145.0], [29.4, 146.0], [29.5, 146.0], [29.6, 146.0], [29.7, 146.0], [29.8, 146.0], [29.9, 147.0], [30.0, 147.0], [30.1, 147.0], [30.2, 148.0], [30.3, 148.0], [30.4, 148.0], [30.5, 148.0], [30.6, 148.0], [30.7, 148.0], [30.8, 148.0], [30.9, 148.0], [31.0, 148.0], [31.1, 149.0], [31.2, 149.0], [31.3, 149.0], [31.4, 149.0], [31.5, 149.0], [31.6, 149.0], [31.7, 149.0], [31.8, 149.0], [31.9, 150.0], [32.0, 150.0], [32.1, 150.0], [32.2, 150.0], [32.3, 150.0], [32.4, 150.0], [32.5, 150.0], [32.6, 150.0], [32.7, 150.0], [32.8, 150.0], [32.9, 150.0], [33.0, 151.0], [33.1, 151.0], [33.2, 151.0], [33.3, 151.0], [33.4, 151.0], [33.5, 151.0], [33.6, 151.0], [33.7, 151.0], [33.8, 151.0], [33.9, 151.0], [34.0, 151.0], [34.1, 152.0], [34.2, 152.0], [34.3, 152.0], [34.4, 152.0], [34.5, 152.0], [34.6, 153.0], [34.7, 153.0], [34.8, 153.0], [34.9, 153.0], [35.0, 154.0], [35.1, 154.0], [35.2, 154.0], [35.3, 154.0], [35.4, 154.0], [35.5, 154.0], [35.6, 155.0], [35.7, 155.0], [35.8, 155.0], [35.9, 155.0], [36.0, 155.0], [36.1, 155.0], [36.2, 156.0], [36.3, 156.0], [36.4, 156.0], [36.5, 156.0], [36.6, 156.0], [36.7, 156.0], [36.8, 156.0], [36.9, 156.0], [37.0, 156.0], [37.1, 157.0], [37.2, 157.0], [37.3, 157.0], [37.4, 157.0], [37.5, 157.0], [37.6, 157.0], [37.7, 157.0], [37.8, 158.0], [37.9, 158.0], [38.0, 158.0], [38.1, 158.0], [38.2, 159.0], [38.3, 159.0], [38.4, 160.0], [38.5, 160.0], [38.6, 161.0], [38.7, 161.0], [38.8, 161.0], [38.9, 161.0], [39.0, 162.0], [39.1, 162.0], [39.2, 162.0], [39.3, 162.0], [39.4, 163.0], [39.5, 163.0], [39.6, 163.0], [39.7, 163.0], [39.8, 163.0], [39.9, 164.0], [40.0, 164.0], [40.1, 164.0], [40.2, 164.0], [40.3, 164.0], [40.4, 165.0], [40.5, 165.0], [40.6, 165.0], [40.7, 165.0], [40.8, 165.0], [40.9, 165.0], [41.0, 166.0], [41.1, 166.0], [41.2, 166.0], [41.3, 166.0], [41.4, 166.0], [41.5, 166.0], [41.6, 166.0], [41.7, 166.0], [41.8, 166.0], [41.9, 167.0], [42.0, 167.0], [42.1, 167.0], [42.2, 167.0], [42.3, 167.0], [42.4, 169.0], [42.5, 169.0], [42.6, 169.0], [42.7, 170.0], [42.8, 171.0], [42.9, 171.0], [43.0, 171.0], [43.1, 172.0], [43.2, 172.0], [43.3, 172.0], [43.4, 172.0], [43.5, 172.0], [43.6, 173.0], [43.7, 173.0], [43.8, 173.0], [43.9, 173.0], [44.0, 173.0], [44.1, 173.0], [44.2, 173.0], [44.3, 174.0], [44.4, 174.0], [44.5, 174.0], [44.6, 174.0], [44.7, 175.0], [44.8, 176.0], [44.9, 176.0], [45.0, 176.0], [45.1, 177.0], [45.2, 177.0], [45.3, 177.0], [45.4, 177.0], [45.5, 178.0], [45.6, 178.0], [45.7, 178.0], [45.8, 179.0], [45.9, 179.0], [46.0, 179.0], [46.1, 179.0], [46.2, 180.0], [46.3, 180.0], [46.4, 181.0], [46.5, 181.0], [46.6, 183.0], [46.7, 183.0], [46.8, 183.0], [46.9, 183.0], [47.0, 183.0], [47.1, 183.0], [47.2, 184.0], [47.3, 184.0], [47.4, 185.0], [47.5, 185.0], [47.6, 186.0], [47.7, 186.0], [47.8, 187.0], [47.9, 187.0], [48.0, 189.0], [48.1, 189.0], [48.2, 189.0], [48.3, 189.0], [48.4, 189.0], [48.5, 189.0], [48.6, 190.0], [48.7, 191.0], [48.8, 192.0], [48.9, 192.0], [49.0, 192.0], [49.1, 192.0], [49.2, 193.0], [49.3, 193.0], [49.4, 193.0], [49.5, 194.0], [49.6, 195.0], [49.7, 195.0], [49.8, 196.0], [49.9, 196.0], [50.0, 196.0], [50.1, 196.0], [50.2, 197.0], [50.3, 197.0], [50.4, 197.0], [50.5, 197.0], [50.6, 197.0], [50.7, 197.0], [50.8, 197.0], [50.9, 197.0], [51.0, 197.0], [51.1, 197.0], [51.2, 198.0], [51.3, 198.0], [51.4, 198.0], [51.5, 198.0], [51.6, 198.0], [51.7, 198.0], [51.8, 198.0], [51.9, 198.0], [52.0, 199.0], [52.1, 199.0], [52.2, 199.0], [52.3, 199.0], [52.4, 199.0], [52.5, 199.0], [52.6, 200.0], [52.7, 200.0], [52.8, 200.0], [52.9, 200.0], [53.0, 200.0], [53.1, 201.0], [53.2, 201.0], [53.3, 201.0], [53.4, 201.0], [53.5, 201.0], [53.6, 201.0], [53.7, 201.0], [53.8, 201.0], [53.9, 202.0], [54.0, 202.0], [54.1, 202.0], [54.2, 202.0], [54.3, 202.0], [54.4, 202.0], [54.5, 202.0], [54.6, 203.0], [54.7, 204.0], [54.8, 204.0], [54.9, 204.0], [55.0, 204.0], [55.1, 204.0], [55.2, 205.0], [55.3, 205.0], [55.4, 206.0], [55.5, 206.0], [55.6, 206.0], [55.7, 206.0], [55.8, 206.0], [55.9, 207.0], [56.0, 207.0], [56.1, 207.0], [56.2, 207.0], [56.3, 207.0], [56.4, 207.0], [56.5, 207.0], [56.6, 208.0], [56.7, 208.0], [56.8, 209.0], [56.9, 209.0], [57.0, 210.0], [57.1, 210.0], [57.2, 210.0], [57.3, 210.0], [57.4, 211.0], [57.5, 213.0], [57.6, 213.0], [57.7, 213.0], [57.8, 213.0], [57.9, 214.0], [58.0, 214.0], [58.1, 214.0], [58.2, 214.0], [58.3, 214.0], [58.4, 214.0], [58.5, 214.0], [58.6, 215.0], [58.7, 216.0], [58.8, 216.0], [58.9, 216.0], [59.0, 216.0], [59.1, 216.0], [59.2, 216.0], [59.3, 216.0], [59.4, 216.0], [59.5, 217.0], [59.6, 217.0], [59.7, 217.0], [59.8, 217.0], [59.9, 217.0], [60.0, 217.0], [60.1, 217.0], [60.2, 217.0], [60.3, 217.0], [60.4, 218.0], [60.5, 218.0], [60.6, 218.0], [60.7, 218.0], [60.8, 219.0], [60.9, 219.0], [61.0, 219.0], [61.1, 219.0], [61.2, 220.0], [61.3, 220.0], [61.4, 221.0], [61.5, 221.0], [61.6, 222.0], [61.7, 222.0], [61.8, 222.0], [61.9, 222.0], [62.0, 222.0], [62.1, 222.0], [62.2, 223.0], [62.3, 223.0], [62.4, 223.0], [62.5, 223.0], [62.6, 223.0], [62.7, 224.0], [62.8, 224.0], [62.9, 224.0], [63.0, 224.0], [63.1, 225.0], [63.2, 225.0], [63.3, 225.0], [63.4, 225.0], [63.5, 225.0], [63.6, 225.0], [63.7, 225.0], [63.8, 226.0], [63.9, 228.0], [64.0, 228.0], [64.1, 228.0], [64.2, 228.0], [64.3, 229.0], [64.4, 229.0], [64.5, 229.0], [64.6, 229.0], [64.7, 229.0], [64.8, 230.0], [64.9, 230.0], [65.0, 230.0], [65.1, 230.0], [65.2, 230.0], [65.3, 230.0], [65.4, 230.0], [65.5, 231.0], [65.6, 232.0], [65.7, 232.0], [65.8, 232.0], [65.9, 232.0], [66.0, 234.0], [66.1, 234.0], [66.2, 235.0], [66.3, 235.0], [66.4, 236.0], [66.5, 236.0], [66.6, 237.0], [66.7, 239.0], [66.8, 239.0], [66.9, 239.0], [67.0, 239.0], [67.1, 239.0], [67.2, 240.0], [67.3, 240.0], [67.4, 240.0], [67.5, 240.0], [67.6, 241.0], [67.7, 241.0], [67.8, 241.0], [67.9, 243.0], [68.0, 244.0], [68.1, 244.0], [68.2, 244.0], [68.3, 244.0], [68.4, 244.0], [68.5, 244.0], [68.6, 245.0], [68.7, 245.0], [68.8, 246.0], [68.9, 246.0], [69.0, 247.0], [69.1, 248.0], [69.2, 249.0], [69.3, 249.0], [69.4, 249.0], [69.5, 250.0], [69.6, 250.0], [69.7, 250.0], [69.8, 253.0], [69.9, 253.0], [70.0, 254.0], [70.1, 254.0], [70.2, 254.0], [70.3, 256.0], [70.4, 256.0], [70.5, 256.0], [70.6, 258.0], [70.7, 258.0], [70.8, 260.0], [70.9, 260.0], [71.0, 263.0], [71.1, 266.0], [71.2, 274.0], [71.3, 274.0], [71.4, 277.0], [71.5, 298.0], [71.6, 298.0], [71.7, 302.0], [71.8, 331.0], [71.9, 340.0], [72.0, 340.0], [72.1, 340.0], [72.2, 346.0], [72.3, 349.0], [72.4, 349.0], [72.5, 352.0], [72.6, 354.0], [72.7, 359.0], [72.8, 359.0], [72.9, 362.0], [73.0, 363.0], [73.1, 364.0], [73.2, 364.0], [73.3, 373.0], [73.4, 373.0], [73.5, 376.0], [73.6, 376.0], [73.7, 386.0], [73.8, 389.0], [73.9, 395.0], [74.0, 395.0], [74.1, 396.0], [74.2, 397.0], [74.3, 397.0], [74.4, 397.0], [74.5, 400.0], [74.6, 403.0], [74.7, 408.0], [74.8, 408.0], [74.9, 409.0], [75.0, 414.0], [75.1, 416.0], [75.2, 416.0], [75.3, 416.0], [75.4, 416.0], [75.5, 417.0], [75.6, 417.0], [75.7, 417.0], [75.8, 420.0], [75.9, 422.0], [76.0, 422.0], [76.1, 424.0], [76.2, 427.0], [76.3, 427.0], [76.4, 427.0], [76.5, 428.0], [76.6, 430.0], [76.7, 436.0], [76.8, 436.0], [76.9, 443.0], [77.0, 443.0], [77.1, 447.0], [77.2, 447.0], [77.3, 447.0], [77.4, 449.0], [77.5, 451.0], [77.6, 451.0], [77.7, 452.0], [77.8, 456.0], [77.9, 459.0], [78.0, 459.0], [78.1, 468.0], [78.2, 475.0], [78.3, 479.0], [78.4, 479.0], [78.5, 481.0], [78.6, 482.0], [78.7, 483.0], [78.8, 483.0], [78.9, 483.0], [79.0, 484.0], [79.1, 485.0], [79.2, 485.0], [79.3, 487.0], [79.4, 491.0], [79.5, 494.0], [79.6, 494.0], [79.7, 494.0], [79.8, 497.0], [79.9, 502.0], [80.0, 502.0], [80.1, 503.0], [80.2, 505.0], [80.3, 506.0], [80.4, 506.0], [80.5, 506.0], [80.6, 507.0], [80.7, 510.0], [80.8, 510.0], [80.9, 510.0], [81.0, 510.0], [81.1, 511.0], [81.2, 511.0], [81.3, 513.0], [81.4, 515.0], [81.5, 517.0], [81.6, 517.0], [81.7, 517.0], [81.8, 518.0], [81.9, 520.0], [82.0, 520.0], [82.1, 525.0], [82.2, 527.0], [82.3, 528.0], [82.4, 528.0], [82.5, 532.0], [82.6, 536.0], [82.7, 543.0], [82.8, 543.0], [82.9, 545.0], [83.0, 552.0], [83.1, 556.0], [83.2, 556.0], [83.3, 557.0], [83.4, 567.0], [83.5, 570.0], [83.6, 570.0], [83.7, 570.0], [83.8, 572.0], [83.9, 581.0], [84.0, 581.0], [84.1, 607.0], [84.2, 621.0], [84.3, 623.0], [84.4, 623.0], [84.5, 644.0], [84.6, 654.0], [84.7, 657.0], [84.8, 657.0], [84.9, 659.0], [85.0, 669.0], [85.1, 679.0], [85.2, 679.0], [85.3, 685.0], [85.4, 694.0], [85.5, 694.0], [85.6, 694.0], [85.7, 698.0], [85.8, 705.0], [85.9, 706.0], [86.0, 706.0], [86.1, 708.0], [86.2, 708.0], [86.3, 710.0], [86.4, 710.0], [86.5, 711.0], [86.6, 711.0], [86.7, 714.0], [86.8, 714.0], [86.9, 715.0], [87.0, 717.0], [87.1, 717.0], [87.2, 717.0], [87.3, 719.0], [87.4, 720.0], [87.5, 720.0], [87.6, 720.0], [87.7, 723.0], [87.8, 726.0], [87.9, 729.0], [88.0, 729.0], [88.1, 729.0], [88.2, 730.0], [88.3, 731.0], [88.4, 731.0], [88.5, 731.0], [88.6, 732.0], [88.7, 733.0], [88.8, 733.0], [88.9, 733.0], [89.0, 733.0], [89.1, 734.0], [89.2, 734.0], [89.3, 735.0], [89.4, 740.0], [89.5, 740.0], [89.6, 740.0], [89.7, 749.0], [89.8, 751.0], [89.9, 755.0], [90.0, 755.0], [90.1, 759.0], [90.2, 761.0], [90.3, 764.0], [90.4, 764.0], [90.5, 764.0], [90.6, 767.0], [90.7, 768.0], [90.8, 768.0], [90.9, 768.0], [91.0, 769.0], [91.1, 769.0], [91.2, 769.0], [91.3, 769.0], [91.4, 772.0], [91.5, 772.0], [91.6, 772.0], [91.7, 772.0], [91.8, 775.0], [91.9, 783.0], [92.0, 783.0], [92.1, 786.0], [92.2, 787.0], [92.3, 788.0], [92.4, 788.0], [92.5, 792.0], [92.6, 802.0], [92.7, 808.0], [92.8, 808.0], [92.9, 810.0], [93.0, 812.0], [93.1, 815.0], [93.2, 815.0], [93.3, 824.0], [93.4, 825.0], [93.5, 827.0], [93.6, 827.0], [93.7, 832.0], [93.8, 839.0], [93.9, 842.0], [94.0, 842.0], [94.1, 858.0], [94.2, 861.0], [94.3, 862.0], [94.4, 862.0], [94.5, 867.0], [94.6, 872.0], [94.7, 876.0], [94.8, 876.0], [94.9, 883.0], [95.0, 888.0], [95.1, 891.0], [95.2, 891.0], [95.3, 893.0], [95.4, 904.0], [95.5, 915.0], [95.6, 915.0], [95.7, 918.0], [95.8, 927.0], [95.9, 935.0], [96.0, 935.0], [96.1, 941.0], [96.2, 942.0], [96.3, 952.0], [96.4, 952.0], [96.5, 952.0], [96.6, 953.0], [96.7, 971.0], [96.8, 971.0], [96.9, 976.0], [97.0, 980.0], [97.1, 990.0], [97.2, 990.0], [97.3, 1006.0], [97.4, 1022.0], [97.5, 1024.0], [97.6, 1024.0], [97.7, 1030.0], [97.8, 1040.0], [97.9, 1042.0], [98.0, 1042.0], [98.1, 1049.0], [98.2, 1052.0], [98.3, 1079.0], [98.4, 1079.0], [98.5, 1081.0], [98.6, 1084.0], [98.7, 1085.0], [98.8, 1085.0], [98.9, 1088.0], [99.0, 1094.0], [99.1, 1118.0], [99.2, 1118.0], [99.3, 1152.0], [99.4, 1154.0], [99.5, 1417.0], [99.6, 1417.0], [99.7, 1458.0], [99.8, 1463.0], [99.9, 1490.0], [100.0, 1490.0]], "isOverall": false, "label": "v1", "isController": false}, {"data": [[0.0, 5.0], [0.1, 5.0], [0.2, 5.0], [0.3, 6.0], [0.4, 6.0], [0.5, 6.0], [0.6, 7.0], [0.7, 7.0], [0.8, 8.0], [0.9, 8.0], [1.0, 9.0], [1.1, 9.0], [1.2, 9.0], [1.3, 9.0], [1.4, 17.0], [1.5, 19.0], [1.6, 20.0], [1.7, 20.0], [1.8, 21.0], [1.9, 27.0], [2.0, 30.0], [2.1, 30.0], [2.2, 38.0], [2.3, 40.0], [2.4, 42.0], [2.5, 42.0], [2.6, 49.0], [2.7, 72.0], [2.8, 295.0], [2.9, 295.0], [3.0, 337.0], [3.1, 2651.0], [3.2, 9844.0], [3.3, 9844.0], [3.4, 9863.0], [3.5, 10030.0], [3.6, 10051.0], [3.7, 10051.0], [3.8, 10113.0], [3.9, 10282.0], [4.0, 10397.0], [4.1, 10397.0], [4.2, 10398.0], [4.3, 10465.0], [4.4, 10476.0], [4.5, 10476.0], [4.6, 10522.0], [4.7, 10630.0], [4.8, 10630.0], [4.9, 10808.0], [5.0, 10822.0], [5.1, 10831.0], [5.2, 10831.0], [5.3, 10931.0], [5.4, 10966.0], [5.5, 10980.0], [5.6, 10980.0], [5.7, 11071.0], [5.8, 11166.0], [5.9, 11176.0], [6.0, 11176.0], [6.1, 11188.0], [6.2, 11267.0], [6.3, 11315.0], [6.4, 11315.0], [6.5, 11333.0], [6.6, 11360.0], [6.7, 11386.0], [6.8, 11386.0], [6.9, 11389.0], [7.0, 11398.0], [7.1, 11418.0], [7.2, 11418.0], [7.3, 11432.0], [7.4, 11440.0], [7.5, 11458.0], [7.6, 11458.0], [7.7, 11462.0], [7.8, 11467.0], [7.9, 11485.0], [8.0, 11485.0], [8.1, 11490.0], [8.2, 11492.0], [8.3, 11503.0], [8.4, 11503.0], [8.5, 11503.0], [8.6, 11504.0], [8.7, 11523.0], [8.8, 11523.0], [8.9, 11526.0], [9.0, 11526.0], [9.1, 11527.0], [9.2, 11527.0], [9.3, 11527.0], [9.4, 11528.0], [9.5, 11533.0], [9.6, 11533.0], [9.7, 11537.0], [9.8, 11551.0], [9.9, 11554.0], [10.0, 11554.0], [10.1, 11567.0], [10.2, 11572.0], [10.3, 11586.0], [10.4, 11586.0], [10.5, 11592.0], [10.6, 11595.0], [10.7, 11608.0], [10.8, 11608.0], [10.9, 11614.0], [11.0, 11617.0], [11.1, 11618.0], [11.2, 11618.0], [11.3, 11622.0], [11.4, 11627.0], [11.5, 11630.0], [11.6, 11630.0], [11.7, 11631.0], [11.8, 11633.0], [11.9, 11633.0], [12.0, 11633.0], [12.1, 11633.0], [12.2, 11634.0], [12.3, 11634.0], [12.4, 11634.0], [12.5, 11636.0], [12.6, 11640.0], [12.7, 11643.0], [12.8, 11643.0], [12.9, 11645.0], [13.0, 11652.0], [13.1, 11657.0], [13.2, 11657.0], [13.3, 11660.0], [13.4, 11662.0], [13.5, 11662.0], [13.6, 11662.0], [13.7, 11668.0], [13.8, 11668.0], [13.9, 11675.0], [14.0, 11675.0], [14.1, 11676.0], [14.2, 11676.0], [14.3, 11677.0], [14.4, 11677.0], [14.5, 11677.0], [14.6, 11679.0], [14.7, 11681.0], [14.8, 11681.0], [14.9, 11682.0], [15.0, 11685.0], [15.1, 11686.0], [15.2, 11686.0], [15.3, 11687.0], [15.4, 11688.0], [15.5, 11691.0], [15.6, 11692.0], [15.7, 11692.0], [15.8, 11694.0], [15.9, 11695.0], [16.0, 11697.0], [16.1, 11697.0], [16.2, 11702.0], [16.3, 11704.0], [16.4, 11706.0], [16.5, 11706.0], [16.6, 11711.0], [16.7, 11712.0], [16.8, 11713.0], [16.9, 11713.0], [17.0, 11715.0], [17.1, 11715.0], [17.2, 11716.0], [17.3, 11716.0], [17.4, 11717.0], [17.5, 11719.0], [17.6, 11725.0], [17.7, 11725.0], [17.8, 11725.0], [17.9, 11726.0], [18.0, 11738.0], [18.1, 11738.0], [18.2, 11738.0], [18.3, 11738.0], [18.4, 11741.0], [18.5, 11741.0], [18.6, 11744.0], [18.7, 11746.0], [18.8, 11746.0], [18.9, 11746.0], [19.0, 11747.0], [19.1, 11749.0], [19.2, 11754.0], [19.3, 11754.0], [19.4, 11754.0], [19.5, 11754.0], [19.6, 11758.0], [19.7, 11758.0], [19.8, 11759.0], [19.9, 11762.0], [20.0, 11762.0], [20.1, 11762.0], [20.2, 11763.0], [20.3, 11764.0], [20.4, 11765.0], [20.5, 11765.0], [20.6, 11765.0], [20.7, 11765.0], [20.8, 11766.0], [20.9, 11766.0], [21.0, 11770.0], [21.1, 11770.0], [21.2, 11771.0], [21.3, 11771.0], [21.4, 11772.0], [21.5, 11776.0], [21.6, 11776.0], [21.7, 11776.0], [21.8, 11782.0], [21.9, 11787.0], [22.0, 11791.0], [22.1, 11791.0], [22.2, 11793.0], [22.3, 11795.0], [22.4, 11797.0], [22.5, 11797.0], [22.6, 11800.0], [22.7, 11800.0], [22.8, 11803.0], [22.9, 11803.0], [23.0, 11804.0], [23.1, 11806.0], [23.2, 11807.0], [23.3, 11807.0], [23.4, 11808.0], [23.5, 11809.0], [23.6, 11810.0], [23.7, 11810.0], [23.8, 11847.0], [23.9, 12014.0], [24.0, 12017.0], [24.1, 12017.0], [24.2, 12025.0], [24.3, 12060.0], [24.4, 12133.0], [24.5, 12133.0], [24.6, 12164.0], [24.7, 12170.0], [24.8, 12184.0], [24.9, 12184.0], [25.0, 12293.0], [25.1, 12299.0], [25.2, 12363.0], [25.3, 12363.0], [25.4, 12371.0], [25.5, 12439.0], [25.6, 12440.0], [25.7, 12440.0], [25.8, 12505.0], [25.9, 12587.0], [26.0, 12592.0], [26.1, 12592.0], [26.2, 12599.0], [26.3, 12619.0], [26.4, 12626.0], [26.5, 12626.0], [26.6, 12626.0], [26.7, 12628.0], [26.8, 12632.0], [26.9, 12632.0], [27.0, 12632.0], [27.1, 12635.0], [27.2, 12641.0], [27.3, 12641.0], [27.4, 12642.0], [27.5, 12643.0], [27.6, 12648.0], [27.7, 12648.0], [27.8, 12655.0], [27.9, 12655.0], [28.0, 12662.0], [28.1, 12662.0], [28.2, 12666.0], [28.3, 12666.0], [28.4, 12673.0], [28.5, 12673.0], [28.6, 12676.0], [28.7, 12679.0], [28.8, 12683.0], [28.9, 12683.0], [29.0, 12686.0], [29.1, 12693.0], [29.2, 12695.0], [29.3, 12695.0], [29.4, 12696.0], [29.5, 12696.0], [29.6, 12708.0], [29.7, 12708.0], [29.8, 12744.0], [29.9, 12748.0], [30.0, 12754.0], [30.1, 12754.0], [30.2, 12847.0], [30.3, 13052.0], [30.4, 13124.0], [30.5, 13124.0], [30.6, 13153.0], [30.7, 13155.0], [30.8, 13157.0], [30.9, 13157.0], [31.0, 13157.0], [31.1, 13159.0], [31.2, 13172.0], [31.3, 13172.0], [31.4, 13175.0], [31.5, 13176.0], [31.6, 13177.0], [31.7, 13177.0], [31.8, 13180.0], [31.9, 13183.0], [32.0, 13185.0], [32.1, 13185.0], [32.2, 13187.0], [32.3, 13188.0], [32.4, 13188.0], [32.5, 13188.0], [32.6, 13194.0], [32.7, 13195.0], [32.8, 13195.0], [32.9, 13195.0], [33.0, 13197.0], [33.1, 13197.0], [33.2, 13202.0], [33.3, 13202.0], [33.4, 13204.0], [33.5, 13205.0], [33.6, 13210.0], [33.7, 13210.0], [33.8, 13211.0], [33.9, 13211.0], [34.0, 13211.0], [34.1, 13211.0], [34.2, 13212.0], [34.3, 13212.0], [34.4, 13212.0], [34.5, 13212.0], [34.6, 13213.0], [34.7, 13214.0], [34.8, 13216.0], [34.9, 13216.0], [35.0, 13216.0], [35.1, 13217.0], [35.2, 13217.0], [35.3, 13217.0], [35.4, 13218.0], [35.5, 13221.0], [35.6, 13221.0], [35.7, 13221.0], [35.8, 13222.0], [35.9, 13222.0], [36.0, 13223.0], [36.1, 13223.0], [36.2, 13224.0], [36.3, 13224.0], [36.4, 13225.0], [36.5, 13225.0], [36.6, 13228.0], [36.7, 13229.0], [36.8, 13229.0], [36.9, 13229.0], [37.0, 13230.0], [37.1, 13234.0], [37.2, 13234.0], [37.3, 13234.0], [37.4, 13234.0], [37.5, 13235.0], [37.6, 13236.0], [37.7, 13236.0], [37.8, 13237.0], [37.9, 13238.0], [38.0, 13238.0], [38.1, 13238.0], [38.2, 13241.0], [38.3, 13242.0], [38.4, 13246.0], [38.5, 13246.0], [38.6, 13247.0], [38.7, 13247.0], [38.8, 13247.0], [38.9, 13247.0], [39.0, 13248.0], [39.1, 13249.0], [39.2, 13250.0], [39.3, 13250.0], [39.4, 13251.0], [39.5, 13251.0], [39.6, 13257.0], [39.7, 13257.0], [39.8, 13258.0], [39.9, 13259.0], [40.0, 13260.0], [40.1, 13260.0], [40.2, 13260.0], [40.3, 13261.0], [40.4, 13261.0], [40.5, 13261.0], [40.6, 13264.0], [40.7, 13264.0], [40.8, 13269.0], [40.9, 13269.0], [41.0, 13270.0], [41.1, 13270.0], [41.2, 13270.0], [41.3, 13270.0], [41.4, 13272.0], [41.5, 13274.0], [41.6, 13284.0], [41.7, 13284.0], [41.8, 13284.0], [41.9, 13291.0], [42.0, 13291.0], [42.1, 13291.0], [42.2, 13293.0], [42.3, 13294.0], [42.4, 13308.0], [42.5, 13308.0], [42.6, 13318.0], [42.7, 13335.0], [42.8, 13341.0], [42.9, 13341.0], [43.0, 13399.0], [43.1, 13422.0], [43.2, 13459.0], [43.3, 13459.0], [43.4, 13686.0], [43.5, 13716.0], [43.6, 13756.0], [43.7, 13756.0], [43.8, 13758.0], [43.9, 13816.0], [44.0, 13845.0], [44.1, 13845.0], [44.2, 13916.0], [44.3, 13963.0], [44.4, 14087.0], [44.5, 14087.0], [44.6, 14120.0], [44.7, 14160.0], [44.8, 14190.0], [44.9, 14190.0], [45.0, 14289.0], [45.1, 14319.0], [45.2, 14641.0], [45.3, 14641.0], [45.4, 14679.0], [45.5, 14696.0], [45.6, 14708.0], [45.7, 14708.0], [45.8, 14732.0], [45.9, 14767.0], [46.0, 14795.0], [46.1, 14795.0], [46.2, 14799.0], [46.3, 14810.0], [46.4, 14841.0], [46.5, 14841.0], [46.6, 14841.0], [46.7, 14846.0], [46.8, 14857.0], [46.9, 14857.0], [47.0, 14862.0], [47.1, 14871.0], [47.2, 14881.0], [47.3, 14881.0], [47.4, 14883.0], [47.5, 14888.0], [47.6, 14894.0], [47.7, 14894.0], [47.8, 14921.0], [47.9, 14952.0], [48.0, 14970.0], [48.1, 14970.0], [48.2, 14970.0], [48.3, 15002.0], [48.4, 15004.0], [48.5, 15004.0], [48.6, 15020.0], [48.7, 15034.0], [48.8, 15035.0], [48.9, 15035.0], [49.0, 15037.0], [49.1, 15039.0], [49.2, 15039.0], [49.3, 15039.0], [49.4, 15044.0], [49.5, 15049.0], [49.6, 15052.0], [49.7, 15052.0], [49.8, 15059.0], [49.9, 15060.0], [50.0, 15061.0], [50.1, 15061.0], [50.2, 15061.0], [50.3, 15063.0], [50.4, 15067.0], [50.5, 15067.0], [50.6, 15069.0], [50.7, 15069.0], [50.8, 15070.0], [50.9, 15070.0], [51.0, 15070.0], [51.1, 15072.0], [51.2, 15072.0], [51.3, 15072.0], [51.4, 15074.0], [51.5, 15076.0], [51.6, 15077.0], [51.7, 15077.0], [51.8, 15079.0], [51.9, 15079.0], [52.0, 15086.0], [52.1, 15086.0], [52.2, 15087.0], [52.3, 15087.0], [52.4, 15092.0], [52.5, 15092.0], [52.6, 15097.0], [52.7, 15099.0], [52.8, 15099.0], [52.9, 15099.0], [53.0, 15109.0], [53.1, 15114.0], [53.2, 15114.0], [53.3, 15114.0], [53.4, 15116.0], [53.5, 15117.0], [53.6, 15118.0], [53.7, 15118.0], [53.8, 15119.0], [53.9, 15119.0], [54.0, 15123.0], [54.1, 15123.0], [54.2, 15123.0], [54.3, 15124.0], [54.4, 15125.0], [54.5, 15125.0], [54.6, 15127.0], [54.7, 15129.0], [54.8, 15133.0], [54.9, 15133.0], [55.0, 15136.0], [55.1, 15137.0], [55.2, 15144.0], [55.3, 15144.0], [55.4, 15144.0], [55.5, 15145.0], [55.6, 15146.0], [55.7, 15146.0], [55.8, 15154.0], [55.9, 15162.0], [56.0, 15163.0], [56.1, 15163.0], [56.2, 15165.0], [56.3, 15166.0], [56.4, 15168.0], [56.5, 15168.0], [56.6, 15169.0], [56.7, 15171.0], [56.8, 15178.0], [56.9, 15178.0], [57.0, 15179.0], [57.1, 15180.0], [57.2, 15183.0], [57.3, 15183.0], [57.4, 15186.0], [57.5, 15186.0], [57.6, 15188.0], [57.7, 15188.0], [57.8, 15191.0], [57.9, 15194.0], [58.0, 15194.0], [58.1, 15194.0], [58.2, 15195.0], [58.3, 15197.0], [58.4, 15199.0], [58.5, 15199.0], [58.6, 15200.0], [58.7, 15200.0], [58.8, 15200.0], [58.9, 15200.0], [59.0, 15205.0], [59.1, 15208.0], [59.2, 15214.0], [59.3, 15214.0], [59.4, 15227.0], [59.5, 15229.0], [59.6, 15232.0], [59.7, 15232.0], [59.8, 15240.0], [59.9, 15245.0], [60.0, 15245.0], [60.1, 15245.0], [60.2, 15248.0], [60.3, 15251.0], [60.4, 15257.0], [60.5, 15257.0], [60.6, 15257.0], [60.7, 15269.0], [60.8, 15270.0], [60.9, 15270.0], [61.0, 15393.0], [61.1, 15419.0], [61.2, 15443.0], [61.3, 15443.0], [61.4, 15563.0], [61.5, 15744.0], [61.6, 15752.0], [61.7, 15752.0], [61.8, 16100.0], [61.9, 16118.0], [62.0, 16158.0], [62.1, 16158.0], [62.2, 16165.0], [62.3, 16173.0], [62.4, 16175.0], [62.5, 16175.0], [62.6, 16185.0], [62.7, 16242.0], [62.8, 16289.0], [62.9, 16289.0], [63.0, 16296.0], [63.1, 16340.0], [63.2, 16381.0], [63.3, 16381.0], [63.4, 16391.0], [63.5, 16392.0], [63.6, 16448.0], [63.7, 16448.0], [63.8, 16466.0], [63.9, 16491.0], [64.0, 16596.0], [64.1, 16596.0], [64.2, 16895.0], [64.3, 16937.0], [64.4, 16945.0], [64.5, 16945.0], [64.6, 16971.0], [64.7, 17113.0], [64.8, 17124.0], [64.9, 17124.0], [65.0, 17147.0], [65.1, 17153.0], [65.2, 17154.0], [65.3, 17154.0], [65.4, 17160.0], [65.5, 17161.0], [65.6, 17163.0], [65.7, 17163.0], [65.8, 17164.0], [65.9, 17165.0], [66.0, 17167.0], [66.1, 17167.0], [66.2, 17168.0], [66.3, 17168.0], [66.4, 17170.0], [66.5, 17170.0], [66.6, 17173.0], [66.7, 17174.0], [66.8, 17174.0], [66.9, 17174.0], [67.0, 17175.0], [67.1, 17177.0], [67.2, 17178.0], [67.3, 17178.0], [67.4, 17181.0], [67.5, 17182.0], [67.6, 17183.0], [67.7, 17183.0], [67.8, 17183.0], [67.9, 17184.0], [68.0, 17184.0], [68.1, 17184.0], [68.2, 17186.0], [68.3, 17186.0], [68.4, 17187.0], [68.5, 17187.0], [68.6, 17187.0], [68.7, 17188.0], [68.8, 17188.0], [68.9, 17188.0], [69.0, 17192.0], [69.1, 17193.0], [69.2, 17197.0], [69.3, 17197.0], [69.4, 17197.0], [69.5, 17199.0], [69.6, 17199.0], [69.7, 17199.0], [69.8, 17200.0], [69.9, 17202.0], [70.0, 17203.0], [70.1, 17203.0], [70.2, 17205.0], [70.3, 17207.0], [70.4, 17207.0], [70.5, 17208.0], [70.6, 17208.0], [70.7, 17209.0], [70.8, 17209.0], [70.9, 17210.0], [71.0, 17212.0], [71.1, 17212.0], [71.2, 17212.0], [71.3, 17212.0], [71.4, 17215.0], [71.5, 17216.0], [71.6, 17216.0], [71.7, 17217.0], [71.8, 17218.0], [71.9, 17219.0], [72.0, 17219.0], [72.1, 17220.0], [72.2, 17221.0], [72.3, 17222.0], [72.4, 17222.0], [72.5, 17223.0], [72.6, 17223.0], [72.7, 17223.0], [72.8, 17223.0], [72.9, 17224.0], [73.0, 17224.0], [73.1, 17225.0], [73.2, 17225.0], [73.3, 17225.0], [73.4, 17227.0], [73.5, 17227.0], [73.6, 17227.0], [73.7, 17227.0], [73.8, 17227.0], [73.9, 17231.0], [74.0, 17231.0], [74.1, 17232.0], [74.2, 17234.0], [74.3, 17237.0], [74.4, 17237.0], [74.5, 17239.0], [74.6, 17242.0], [74.7, 17242.0], [74.8, 17242.0], [74.9, 17242.0], [75.0, 17250.0], [75.1, 17252.0], [75.2, 17252.0], [75.3, 17255.0], [75.4, 17257.0], [75.5, 17262.0], [75.6, 17262.0], [75.7, 17262.0], [75.8, 17276.0], [75.9, 17283.0], [76.0, 17283.0], [76.1, 17290.0], [76.2, 17301.0], [76.3, 17307.0], [76.4, 17307.0], [76.5, 17310.0], [76.6, 17363.0], [76.7, 17407.0], [76.8, 17407.0], [76.9, 17413.0], [77.0, 17420.0], [77.1, 17429.0], [77.2, 17429.0], [77.3, 17431.0], [77.4, 17484.0], [77.5, 17503.0], [77.6, 17503.0], [77.7, 17513.0], [77.8, 17523.0], [77.9, 17523.0], [78.0, 17523.0], [78.1, 17524.0], [78.2, 17527.0], [78.3, 17535.0], [78.4, 17535.0], [78.5, 17545.0], [78.6, 17572.0], [78.7, 17583.0], [78.8, 17583.0], [78.9, 17601.0], [79.0, 17606.0], [79.1, 17614.0], [79.2, 17614.0], [79.3, 17620.0], [79.4, 17630.0], [79.5, 17634.0], [79.6, 17634.0], [79.7, 17634.0], [79.8, 17647.0], [79.9, 17656.0], [80.0, 17656.0], [80.1, 17674.0], [80.2, 17719.0], [80.3, 17732.0], [80.4, 17732.0], [80.5, 17749.0], [80.6, 17770.0], [80.7, 17774.0], [80.8, 17774.0], [80.9, 17865.0], [81.0, 17978.0], [81.1, 18002.0], [81.2, 18002.0], [81.3, 18004.0], [81.4, 18018.0], [81.5, 18060.0], [81.6, 18060.0], [81.7, 18152.0], [81.8, 18176.0], [81.9, 18284.0], [82.0, 18284.0], [82.1, 18303.0], [82.2, 18340.0], [82.3, 18351.0], [82.4, 18351.0], [82.5, 18356.0], [82.6, 18412.0], [82.7, 18489.0], [82.8, 18489.0], [82.9, 18532.0], [83.0, 18560.0], [83.1, 18593.0], [83.2, 18593.0], [83.3, 18607.0], [83.4, 18620.0], [83.5, 18644.0], [83.6, 18644.0], [83.7, 18673.0], [83.8, 18673.0], [83.9, 18754.0], [84.0, 18754.0], [84.1, 18803.0], [84.2, 18918.0], [84.3, 18932.0], [84.4, 18932.0], [84.5, 18952.0], [84.6, 18963.0], [84.7, 18982.0], [84.8, 18982.0], [84.9, 18987.0], [85.0, 19029.0], [85.1, 19046.0], [85.2, 19046.0], [85.3, 19059.0], [85.4, 19059.0], [85.5, 19075.0], [85.6, 19075.0], [85.7, 19079.0], [85.8, 19092.0], [85.9, 19096.0], [86.0, 19096.0], [86.1, 19101.0], [86.2, 19104.0], [86.3, 19104.0], [86.4, 19104.0], [86.5, 19105.0], [86.6, 19108.0], [86.7, 19109.0], [86.8, 19109.0], [86.9, 19117.0], [87.0, 19119.0], [87.1, 19124.0], [87.2, 19124.0], [87.3, 19125.0], [87.4, 19128.0], [87.5, 19132.0], [87.6, 19132.0], [87.7, 19133.0], [87.8, 19135.0], [87.9, 19136.0], [88.0, 19136.0], [88.1, 19136.0], [88.2, 19136.0], [88.3, 19137.0], [88.4, 19137.0], [88.5, 19138.0], [88.6, 19139.0], [88.7, 19139.0], [88.8, 19139.0], [88.9, 19139.0], [89.0, 19141.0], [89.1, 19144.0], [89.2, 19144.0], [89.3, 19145.0], [89.4, 19147.0], [89.5, 19147.0], [89.6, 19147.0], [89.7, 19148.0], [89.8, 19148.0], [89.9, 19148.0], [90.0, 19148.0], [90.1, 19149.0], [90.2, 19149.0], [90.3, 19149.0], [90.4, 19149.0], [90.5, 19150.0], [90.6, 19150.0], [90.7, 19152.0], [90.8, 19152.0], [90.9, 19154.0], [91.0, 19156.0], [91.1, 19157.0], [91.2, 19157.0], [91.3, 19159.0], [91.4, 19159.0], [91.5, 19159.0], [91.6, 19159.0], [91.7, 19160.0], [91.8, 19160.0], [91.9, 19161.0], [92.0, 19161.0], [92.1, 19161.0], [92.2, 19163.0], [92.3, 19163.0], [92.4, 19163.0], [92.5, 19163.0], [92.6, 19164.0], [92.7, 19164.0], [92.8, 19164.0], [92.9, 19164.0], [93.0, 19164.0], [93.1, 19166.0], [93.2, 19166.0], [93.3, 19166.0], [93.4, 19166.0], [93.5, 19169.0], [93.6, 19169.0], [93.7, 19169.0], [93.8, 19169.0], [93.9, 19169.0], [94.0, 19169.0], [94.1, 19170.0], [94.2, 19173.0], [94.3, 19173.0], [94.4, 19173.0], [94.5, 19173.0], [94.6, 19175.0], [94.7, 19175.0], [94.8, 19175.0], [94.9, 19176.0], [95.0, 19177.0], [95.1, 19179.0], [95.2, 19179.0], [95.3, 19179.0], [95.4, 19179.0], [95.5, 19181.0], [95.6, 19181.0], [95.7, 19185.0], [95.8, 19185.0], [95.9, 19187.0], [96.0, 19187.0], [96.1, 19188.0], [96.2, 19189.0], [96.3, 19189.0], [96.4, 19189.0], [96.5, 19189.0], [96.6, 19192.0], [96.7, 19193.0], [96.8, 19193.0], [96.9, 19199.0], [97.0, 19199.0], [97.1, 19201.0], [97.2, 19201.0], [97.3, 19201.0], [97.4, 19204.0], [97.5, 19210.0], [97.6, 19210.0], [97.7, 19211.0], [97.8, 19212.0], [97.9, 19219.0], [98.0, 19219.0], [98.1, 19226.0], [98.2, 19277.0], [98.3, 19291.0], [98.4, 19291.0], [98.5, 19312.0], [98.6, 19327.0], [98.7, 19345.0], [98.8, 19345.0], [98.9, 19414.0], [99.0, 19498.0], [99.1, 19555.0], [99.2, 19555.0], [99.3, 19579.0], [99.4, 19823.0], [99.5, 19943.0], [99.6, 19943.0], [99.7, 19969.0], [99.8, 20156.0], [99.9, 20553.0], [100.0, 20553.0]], "isOverall": false, "label": "v2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 316.0, "series": [{"data": [[0.0, 78.0], [600.0, 13.0], [700.0, 51.0], [800.0, 21.0], [200.0, 143.0], [900.0, 14.0], [1000.0, 14.0], [1100.0, 3.0], [300.0, 21.0], [1400.0, 4.0], [400.0, 41.0], [100.0, 316.0], [500.0, 31.0]], "isOverall": false, "label": "v1", "isController": false}, {"data": [[0.0, 21.0], [2600.0, 1.0], [9800.0, 2.0], [10100.0, 1.0], [10000.0, 2.0], [10200.0, 1.0], [10300.0, 2.0], [10400.0, 2.0], [10600.0, 1.0], [10500.0, 1.0], [10900.0, 3.0], [10800.0, 3.0], [11100.0, 3.0], [11200.0, 1.0], [11000.0, 1.0], [11400.0, 9.0], [11600.0, 41.0], [11700.0, 48.0], [11500.0, 18.0], [11300.0, 6.0], [11800.0, 10.0], [12200.0, 2.0], [12000.0, 4.0], [12100.0, 4.0], [12400.0, 2.0], [12300.0, 2.0], [12700.0, 4.0], [12500.0, 4.0], [12600.0, 25.0], [13200.0, 69.0], [13100.0, 21.0], [13300.0, 5.0], [12800.0, 1.0], [13000.0, 1.0], [13400.0, 2.0], [13700.0, 3.0], [13600.0, 1.0], [13800.0, 2.0], [14300.0, 1.0], [14100.0, 3.0], [13900.0, 2.0], [14000.0, 1.0], [14200.0, 1.0], [14700.0, 5.0], [14600.0, 3.0], [14800.0, 11.0], [15000.0, 35.0], [15200.0, 18.0], [15300.0, 1.0], [14900.0, 4.0], [15100.0, 42.0], [15500.0, 1.0], [15400.0, 2.0], [15700.0, 2.0], [16100.0, 7.0], [16300.0, 4.0], [16200.0, 3.0], [16900.0, 3.0], [17300.0, 4.0], [16500.0, 1.0], [16400.0, 3.0], [17400.0, 6.0], [17100.0, 38.0], [16800.0, 1.0], [17200.0, 48.0], [17600.0, 10.0], [17500.0, 10.0], [17700.0, 5.0], [17900.0, 1.0], [18300.0, 4.0], [18400.0, 2.0], [18000.0, 4.0], [17800.0, 1.0], [18100.0, 2.0], [18200.0, 1.0], [18600.0, 5.0], [18700.0, 1.0], [18800.0, 1.0], [19100.0, 83.0], [19000.0, 8.0], [18900.0, 6.0], [18500.0, 3.0], [19300.0, 3.0], [19400.0, 2.0], [19200.0, 10.0], [19900.0, 2.0], [19500.0, 2.0], [19800.0, 1.0], [20100.0, 1.0], [20500.0, 1.0], [200.0, 1.0], [300.0, 1.0]], "isOverall": false, "label": "v2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 46.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 727.0, "series": [{"data": [[0.0, 576.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 151.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 727.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 46.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 119.62060889929735, "minX": 1.72605078E12, "maxY": 146.51724137931012, "series": [{"data": [[1.72605078E12, 146.51724137931012], [1.72605084E12, 119.62060889929735]], "isOverall": false, "label": "setUp Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72605084E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 12.666666666666666, "minX": 6.0, "maxY": 20553.0, "series": [{"data": [[129.0, 635.5], [136.0, 915.0], [143.0, 890.0], [142.0, 1463.0], [141.0, 213.8833333333333], [144.0, 935.0], [146.0, 231.669642857143], [150.0, 547.5098039215686], [149.0, 23.0], [148.0, 259.0833333333333], [147.0, 350.6666666666667], [145.0, 258.49999999999983]], "isOverall": false, "label": "v1", "isController": false}, {"data": [[145.8240000000001, 304.4360000000002]], "isOverall": false, "label": "v1-Aggregated", "isController": false}, {"data": [[6.0, 19195.5], [14.0, 19136.0], [16.0, 19166.0], [17.0, 19169.0], [18.0, 19179.0], [19.0, 19164.0], [20.0, 19219.0], [21.0, 19201.4], [22.0, 19180.5], [23.0, 19152.75], [26.0, 19163.333333333332], [33.0, 19156.0], [34.0, 19277.0], [37.0, 19096.0], [36.0, 19174.0], [41.0, 19157.0], [40.0, 19162.333333333332], [43.0, 19139.0], [42.0, 19156.0], [45.0, 19159.0], [44.0, 19173.0], [50.0, 19177.0], [57.0, 19135.0], [63.0, 19112.0], [62.0, 19158.0], [67.0, 19168.833333333332], [66.0, 19137.0], [65.0, 19148.0], [64.0, 19176.0], [69.0, 19174.2], [68.0, 19124.0], [75.0, 19130.0], [74.0, 19141.666666666668], [78.0, 19149.0], [77.0, 19175.666666666668], [82.0, 19150.75], [91.0, 19197.5], [89.0, 19173.75], [88.0, 19137.333333333332], [95.0, 19029.0], [94.0, 19101.0], [93.0, 19189.0], [92.0, 19185.0], [99.0, 18963.0], [98.0, 19046.0], [97.0, 18982.0], [96.0, 18987.0], [103.0, 18620.0], [102.0, 18673.0], [101.0, 18932.0], [100.0, 18952.0], [107.0, 18532.0], [106.0, 18644.0], [105.0, 18593.0], [104.0, 18560.0], [111.0, 18303.0], [110.0, 18489.0], [109.0, 18351.0], [108.0, 18412.0], [115.0, 18152.0], [114.0, 18176.0], [113.0, 18284.0], [112.0, 18356.0], [119.0, 19579.0], [118.0, 18004.0], [117.0, 18002.0], [116.0, 19291.0], [123.0, 17770.0], [122.0, 17749.0], [121.0, 20156.0], [120.0, 18018.0], [127.0, 19823.0], [126.0, 17674.0], [125.0, 17719.0], [124.0, 17732.0], [135.0, 19555.0], [134.0, 19327.0], [133.0, 19414.0], [132.0, 20553.0], [131.0, 19498.0], [130.0, 17865.0], [129.0, 19059.0], [128.0, 19943.0], [143.0, 17272.763157894733], [142.0, 17310.647058823528], [141.0, 17540.575000000008], [140.0, 18673.0], [139.0, 19969.0], [138.0, 18918.0], [137.0, 19109.0], [136.0, 17363.0], [150.0, 51.999999999999986], [149.0, 12.666666666666666], [148.0, 9482.5], [147.0, 11294.5], [146.0, 12909.197260273966], [145.0, 15906.232323232327], [144.0, 17266.25]], "isOverall": false, "label": "v2", "isController": false}, {"data": [[131.89466666666652, 14603.485333333329]], "isOverall": false, "label": "v2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72605078E12, "maxY": 768.0833333333334, "series": [{"data": [[1.72605078E12, 768.0833333333334], [1.72605084E12, 294.1333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72605078E12, 0.0], [1.72605084E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72605084E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 229.6950354609929, "minX": 1.72605078E12, "maxY": 18104.451048951047, "series": [{"data": [[1.72605078E12, 321.7405582922824], [1.72605084E12, 229.6950354609929]], "isOverall": false, "label": "v1", "isController": false}, {"data": [[1.72605078E12, 12445.562499999998], [1.72605084E12, 18104.451048951047]], "isOverall": false, "label": "v2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72605084E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 229.66666666666677, "minX": 1.72605078E12, "maxY": 18104.395104895113, "series": [{"data": [[1.72605078E12, 318.6157635467979], [1.72605084E12, 229.66666666666677]], "isOverall": false, "label": "v1", "isController": false}, {"data": [[1.72605078E12, 12444.547413793098], [1.72605084E12, 18104.395104895113]], "isOverall": false, "label": "v2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72605084E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.010489510489510488, "minX": 1.72605078E12, "maxY": 47.272577996715945, "series": [{"data": [[1.72605078E12, 47.272577996715945], [1.72605084E12, 0.014184397163120574]], "isOverall": false, "label": "v1", "isController": false}, {"data": [[1.72605078E12, 2.2478448275862046], [1.72605084E12, 0.010489510489510488]], "isOverall": false, "label": "v2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72605084E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 33.0, "minX": 1.72605078E12, "maxY": 20553.0, "series": [{"data": [[1.72605078E12, 16392.0], [1.72605084E12, 20553.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72605078E12, 33.0], [1.72605084E12, 48.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72605078E12, 14976.400000000001], [1.72605084E12, 19173.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72605078E12, 15269.72], [1.72605084E12, 19909.399999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72605078E12, 733.0], [1.72605084E12, 17216.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72605078E12, 15144.0], [1.72605084E12, 19201.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72605084E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9.0, "minX": 1.0, "maxY": 19555.0, "series": [{"data": [[2.0, 1404.5], [8.0, 8130.5], [9.0, 10030.0], [38.0, 732.5], [10.0, 15021.5], [169.0, 563.5], [45.0, 14795.0], [3.0, 18060.0], [199.0, 503.0], [200.0, 12694.0], [56.0, 229.0], [238.0, 11425.0], [15.0, 18018.0], [16.0, 10948.5], [1.0, 19555.0], [17.0, 11681.0], [22.0, 6729.5], [25.0, 392.5], [7.0, 14120.0], [112.0, 19155.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[169.0, 38.0], [25.0, 9.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 238.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 19555.0, "series": [{"data": [[2.0, 1404.5], [8.0, 8130.0], [9.0, 10030.0], [38.0, 732.5], [10.0, 15021.5], [169.0, 563.5], [45.0, 14795.0], [3.0, 18060.0], [199.0, 503.0], [200.0, 12694.0], [56.0, 229.0], [238.0, 11425.0], [15.0, 18018.0], [16.0, 10948.5], [1.0, 19555.0], [17.0, 11681.0], [22.0, 6729.5], [25.0, 392.5], [7.0, 14120.0], [112.0, 19155.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[169.0, 0.0], [25.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 238.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.7, "minX": 1.72605078E12, "maxY": 20.3, "series": [{"data": [[1.72605078E12, 20.3], [1.72605084E12, 4.7]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72605084E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.7666666666666667, "minX": 1.72605078E12, "maxY": 17.116666666666667, "series": [{"data": [[1.72605078E12, 17.116666666666667], [1.72605084E12, 7.116666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72605078E12, 0.7666666666666667]], "isOverall": false, "label": "null 0", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72605084E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.72605078E12, "maxY": 9.733333333333333, "series": [{"data": [[1.72605078E12, 0.35]], "isOverall": false, "label": "v2-failure", "isController": false}, {"data": [[1.72605078E12, 7.383333333333334], [1.72605084E12, 4.766666666666667]], "isOverall": false, "label": "v2-success", "isController": false}, {"data": [[1.72605078E12, 9.733333333333333], [1.72605084E12, 2.35]], "isOverall": false, "label": "v1-success", "isController": false}, {"data": [[1.72605078E12, 0.4166666666666667]], "isOverall": false, "label": "v1-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72605084E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.7666666666666667, "minX": 1.72605078E12, "maxY": 17.116666666666667, "series": [{"data": [[1.72605078E12, 17.116666666666667], [1.72605084E12, 7.116666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72605078E12, 0.7666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72605084E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

